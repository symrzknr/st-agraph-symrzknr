[{"C:\\Users\\marioalvarez1\\ARM2019\\1_PROYECTOS\\NETWORKX\\streamlit-agraph-master\\st-agraph-symr\\st_agraph_symrzknr\\frontend\\src\\index.tsx":"1","C:\\Users\\marioalvarez1\\ARM2019\\1_PROYECTOS\\NETWORKX\\streamlit-agraph-master\\st-agraph-symr\\st_agraph_symrzknr\\frontend\\src\\AgraphComponent.tsx":"2"},{"size":229,"mtime":1607522932000,"results":"3","hashOfConfig":"4"},{"size":3411,"mtime":1609334447560,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"16r2h36",{"filePath":"9","messages":"10","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\marioalvarez1\\ARM2019\\1_PROYECTOS\\NETWORKX\\streamlit-agraph-master\\st-agraph-symr\\st_agraph_symrzknr\\frontend\\src\\index.tsx",[],["12","13"],"C:\\Users\\marioalvarez1\\ARM2019\\1_PROYECTOS\\NETWORKX\\streamlit-agraph-master\\st-agraph-symr\\st_agraph_symrzknr\\frontend\\src\\AgraphComponent.tsx",["14","15","16","17","18","19","20"],"import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\n\nimport { Graph } from \"react-d3-graph\";\n\ninterface State {\n  numClicks: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass AgraphComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0 }\n\n  public render = (): ReactNode => {\n\n    const data = JSON.parse(this.props.args[\"data\"]);\n    const config = JSON.parse(this.props.args[\"config\"]);\n\n// const config = {\n//     nodeHighlightBehavior: true\n// };\n\n//     const config = {\n//         nodeHighlightBehavior: nodeHighlightBehavior,\n//         node: {\n//             color: node_color,\n//             size: node_size,\n//             highlightStrokeColor:highlightStrokeColor,\n//         },\n//         link: {\n//             highlightColor: highlightColor,\n//         },\n//   };\n\n    const onClickGraph = function() {\n        window.alert(`Clicked the graph background`);\n    };\n\n    const onClickNode = function(nodeId: any) {\n        window.alert(`Clicked hehehehhehe node ${nodeId}`);\n    };\n\n    const onDoubleClickNode = function(nodeId: any) {\n        window.alert(`Double clicked node ${nodeId}`);\n    };\n\n    const onRightClickNode = function(event: any, nodeId: any) {\n        window.alert(`Right clicked node ${nodeId}`);\n    };\n\n    const onMouseOverNode = function(nodeId: any) {\n        window.alert(`Mouse over node ${nodeId}`);\n    };\n\n    const onMouseOutNode = function(nodeId: any) {\n        window.alert(`Mouse out node ${nodeId}`);\n    };\n\n    const onClickLink = function(source: any, target: any) {\n        window.alert(`Clicked link between ${source} and ${target}`);\n    };\n\n    const onRightClickLink = function(event: any, source: any, target: any) {\n        window.alert(`Right clicked link between ${source} and ${target}`);\n    };\n\n    const onMouseOverLink = function(source: any, target: any) {\n        window.alert(`Mouse over in link between ${source} and ${target}`);\n    };\n\n    const onMouseOutLink = function(source: any, target: any) {\n        window.alert(`Mouse out link between ${source} and ${target}`);\n    };\n\n    const onNodePositionChange = function(nodeId: any, x: any, y: any) {\n        window.alert(`Node ${nodeId} is moved to new position. New position is x= ${x} y= ${y}`);\n    };\n\n    return (\n      <Graph\n        id=\"graph-id\"\n        data={data}\n        config={config}\n        onClickNode={onClickNode}\n        onDoubleClickNode={onDoubleClickNode}\n        onRightClickNode={onRightClickNode}\n        // onClickGraph={onClickGraph}\n        onClickLink={onClickLink}\n        onRightClickLink={onRightClickLink}\n      />\n    )\n  }\n\n  // private onClicked = (): void => {\n  //   // Streamlit via `Streamlit.setComponentValue`.\n  //   this.setState(\n  //     prevState => ({ numClicks: prevState.numClicks + 1 }),\n  //     () => Streamlit.setComponentValue(this.state.numClicks)\n  //   )\n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(AgraphComponent)\n",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":2,"column":3,"nodeType":"27","messageId":"28","endLine":2,"endColumn":12},{"ruleId":"25","severity":1,"message":"29","line":42,"column":11,"nodeType":"27","messageId":"28","endLine":42,"endColumn":23},{"ruleId":"25","severity":1,"message":"30","line":58,"column":11,"nodeType":"27","messageId":"28","endLine":58,"endColumn":26},{"ruleId":"25","severity":1,"message":"31","line":62,"column":11,"nodeType":"27","messageId":"28","endLine":62,"endColumn":25},{"ruleId":"25","severity":1,"message":"32","line":74,"column":11,"nodeType":"27","messageId":"28","endLine":74,"endColumn":26},{"ruleId":"25","severity":1,"message":"33","line":78,"column":11,"nodeType":"27","messageId":"28","endLine":78,"endColumn":25},{"ruleId":"25","severity":1,"message":"34","line":82,"column":11,"nodeType":"27","messageId":"28","endLine":82,"endColumn":31},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"@typescript-eslint/no-unused-vars","'Streamlit' is defined but never used.","Identifier","unusedVar","'onClickGraph' is assigned a value but never used.","'onMouseOverNode' is assigned a value but never used.","'onMouseOutNode' is assigned a value but never used.","'onMouseOverLink' is assigned a value but never used.","'onMouseOutLink' is assigned a value but never used.","'onNodePositionChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]